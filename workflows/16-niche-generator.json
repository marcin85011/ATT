{
  "name": "16-Niche-Generator",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// ATT System - Niche Generator Agent #16\n// Generates 50 keyword combinations from PRD lists for market analysis\n// Updated with Google Keyword API integration for real competition data\n\nconst GoogleKeywordClient = require('../../clients/google-keyword-client');\n\n// PRD Keyword Lists for Merch by Amazon\nconst categories = {\n  professions: [\n    'Teacher', 'Nurse', 'Doctor', 'Engineer', 'Programmer', 'Designer',\n    'Chef', 'Firefighter', 'Police', 'Lawyer', 'Accountant', 'Mechanic',\n    'Plumber', 'Electrician', 'Photographer', 'Artist', 'Musician', 'Writer'\n  ],\n  \n  hobbies: [\n    'Gaming', 'Fishing', 'Hiking', 'Cooking', 'Gardening', 'Photography',\n    'Reading', 'Traveling', 'Yoga', 'Running', 'Cycling', 'Painting',\n    'Knitting', 'Woodworking', 'Camping', 'Surfing', 'Skiing', 'Dancing'\n  ],\n  \n  family: [\n    'Mom', 'Dad', 'Grandma', 'Grandpa', 'Sister', 'Brother', 'Son',\n    'Daughter', 'Wife', 'Husband', 'Aunt', 'Uncle', 'Cousin', 'Family'\n  ],\n  \n  attitudes: [\n    'Funny', 'Sarcastic', 'Proud', 'Tired', 'Blessed', 'Happy', 'Crazy',\n    'Awesome', 'Amazing', 'Strong', 'Smart', 'Cool', 'Wild', 'Free'\n  ],\n  \n  occasions: [\n    'Birthday', 'Christmas', 'Halloween', 'Thanksgiving', 'Valentine',\n    'Mother\\'s Day', 'Father\\'s Day', 'Graduation', 'Retirement', 'Anniversary'\n  ],\n  \n  trending: [\n    'Vintage', 'Retro', 'Minimalist', 'Boho', 'Aesthetic', 'Vibes',\n    'Energy', 'Mood', 'Life', 'Goals', 'Squad', 'Tribe', 'Crew', 'Gang'\n  ]\n};\n\n// Initialize Google Keyword client\nconst keywordClient = new GoogleKeywordClient();\n\n// Get real competition data using Google Keyword API with Agent #16 ID\nasync function getCompetitionData(keyword) {\n  try {\n    // Use Google Keyword API with proper Agent #16 ID for cost tracking\n    const searchData = await keywordClient.getSearchVolume(keyword, 'US', 'en', '16');\n    \n    // Convert search volume to competition estimate (inverse relationship)\n    let competition = 500; // default\n    if (searchData.searchVolume) {\n      // Higher search volume = higher competition\n      competition = Math.min(1000, Math.max(100, Math.round(searchData.searchVolume / 100)));\n    }\n    \n    console.log(`‚úÖ Real data for \"${keyword}\": Volume=${searchData.searchVolume}, Competition=${competition}`);\n    return competition;\n    \n  } catch (error) {\n    console.warn(`‚ö†Ô∏è Failed to get real competition data for \"${keyword}\": ${error.message}`);\n    // Fallback to estimated competition based on keyword characteristics\n    return estimateCompetition(keyword);\n  }\n}\n\n// Fallback competition estimation\nfunction estimateCompetition(keyword) {\n  const words = keyword.toLowerCase().split(' ');\n  let baseCompetition = 300;\n  \n  // Adjust based on keyword characteristics\n  if (words.includes('mom') || words.includes('dad')) baseCompetition += 200;\n  if (words.includes('funny') || words.includes('humor')) baseCompetition += 150;\n  if (words.includes('teacher') || words.includes('nurse')) baseCompetition += 100;\n  if (words.length > 3) baseCompetition -= 100; // Longer phrases = less competition\n  \n  return Math.max(100, Math.min(1000, baseCompetition + Math.floor(Math.random() * 200)));\n}\n\n// Generate combinations with market appeal scoring\nasync function generateNicheCombinations() {\n  const combinations = [];\n  const usedCombos = new Set();\n  \n  // Combination patterns with market appeal weights\n  const patterns = [\n    { template: '{profession} {attitude}', weight: 0.9 },\n    { template: '{hobby} {family}', weight: 0.85 },\n    { template: '{attitude} {profession} {family}', weight: 0.88 },\n    { template: '{trending} {hobby}', weight: 0.82 },\n    { template: '{family} {hobby} {attitude}', weight: 0.86 },\n    { template: '{occasion} {profession}', weight: 0.75 },\n    { template: '{trending} {profession}', weight: 0.78 },\n    { template: '{attitude} {family} {occasion}', weight: 0.73 },\n    { template: '{hobby} {trending}', weight: 0.80 },\n    { template: '{profession} {occasion}', weight: 0.72 }\n  ];\n  \n  let attempts = 0;\n  while (combinations.length < 50 && attempts < 500) {\n    const pattern = patterns[Math.floor(Math.random() * patterns.length)];\n    let combo = pattern.template;\n    \n    // Replace placeholders with random words\n    Object.keys(categories).forEach(category => {\n      const placeholder = `{${category}}`;\n      if (combo.includes(placeholder)) {\n        const words = categories[category];\n        const randomWord = words[Math.floor(Math.random() * words.length)];\n        combo = combo.replace(placeholder, randomWord);\n      }\n    });\n    \n    // Check for duplicates and add market scoring\n    if (!usedCombos.has(combo)) {\n      usedCombos.add(combo);\n      \n      // Calculate market appeal score\n      const wordCount = combo.split(' ').length;\n      const popularityBonus = combo.toLowerCase().includes('mom') || \n                             combo.toLowerCase().includes('dad') ? 0.1 : 0;\n      const professionalBonus = categories.professions.some(p => \n                               combo.toLowerCase().includes(p.toLowerCase())) ? 0.05 : 0;\n      \n      const marketScore = Math.min(95, \n        (pattern.weight * 100) + \n        (wordCount <= 3 ? 5 : -5) + \n        (popularityBonus * 10) + \n        (professionalBonus * 5) + \n        (Math.random() * 10 - 5) // Random variance\n      );\n      \n      combinations.push({\n        niche: combo,\n        pattern: pattern.template,\n        market_score: Math.round(marketScore),\n        word_count: wordCount,\n        estimated_competition: await getCompetitionData(combo),\n        suggested_price_range: wordCount <= 2 ? '$19.99-$24.99' : '$17.99-$22.99',\n        target_audience: determineTargetAudience(combo),\n        generated_at: new Date().toISOString(),\n        status: 'generated'\n      });\n    }\n    attempts++;\n  }\n  \n  // Sort by market score descending\n  return combinations.sort((a, b) => b.market_score - a.market_score);\n}\n\n// Determine target audience based on niche content\nfunction determineTargetAudience(niche) {\n  const lower = niche.toLowerCase();\n  \n  if (lower.includes('mom') || lower.includes('mother')) return 'mothers';\n  if (lower.includes('dad') || lower.includes('father')) return 'fathers';\n  if (lower.includes('teacher')) return 'educators';\n  if (lower.includes('nurse') || lower.includes('doctor')) return 'healthcare';\n  if (lower.includes('gaming') || lower.includes('programmer')) return 'tech_enthusiasts';\n  if (lower.includes('funny') || lower.includes('sarcastic')) return 'humor_seekers';\n  if (lower.includes('vintage') || lower.includes('retro')) return 'vintage_lovers';\n  \n  return 'general_adult';\n}\n\n// Main execution\nasync function main() {\n  console.log('üéØ Starting Niche Generator Agent #16 with Google Keyword API...');\n  \n  try {\n    // Generate niche combinations with real Google Keyword data\n    const niches = await generateNicheCombinations();\n    \n    console.log(`‚úÖ Generated ${niches.length} niche combinations using real Google data`);\n    console.log(`üìä Average market score: ${Math.round(niches.reduce((sum, n) => sum + n.market_score, 0) / niches.length)}`);\n    console.log(`üéØ Top 5 niches by market score:`);\n    niches.slice(0, 5).forEach((niche, i) => {\n      console.log(`   ${i+1}. ${niche.niche} (Score: ${niche.market_score}, Competition: ${niche.estimated_competition})`);\n    });\n    \n    return niches.map(niche => ({ json: niche }));\n    \n  } catch (error) {\n    console.error('‚ùå Error in Niche Generator Agent #16:', error);\n    throw error;\n  }\n}\n\n// Execute and return results\nreturn await main();"
      },
      "id": "niche-generator-code",
      "name": "Generate Niche Combinations",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "{{ $env.NOTION_DATABASE_ID }}",
          "mode": "id"
        },
        "properties": {
          "title": "={{ $json.niche }}",
          "properties": {
            "Status": {
              "type": "select",
              "select": {
                "name": "Generated"
              }
            },
            "Market Score": {
              "type": "number",
              "number": "={{ $json.market_score }}"
            },
            "Pattern": {
              "type": "text",
              "text": [
                {
                  "type": "text",
                  "text": "={{ $json.pattern }}"
                }
              ]
            },
            "Target Audience": {
              "type": "text",
              "text": [
                {
                  "type": "text",
                  "text": "={{ $json.target_audience }}"
                }
              ]
            },
            "Competition": {
              "type": "number",
              "number": "={{ $json.estimated_competition }}"
            },
            "Price Range": {
              "type": "text",
              "text": [
                {
                  "type": "text",
                  "text": "={{ $json.suggested_price_range }}"
                }
              ]
            },
            "Word Count": {
              "type": "number",
              "number": "={{ $json.word_count }}"
            },
            "Agent": {
              "type": "text",
              "text": [
                {
                  "type": "text",
                  "text": "niche-generator-16"
                }
              ]
            }
          }
        }
      },
      "id": "save-to-notion",
      "name": "Save to Notion Database",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [640, 300],
      "retryOnFail": true,
      "retryTimes": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition_1",
              "leftValue": "={{ $json.market_score }}",
              "rightValue": 80,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "filter-high-potential",
      "name": "Filter High Potential (>80)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [840, 300]
    },
    {
      "parameters": {
        "mode": "webhook",
        "webhook": "={{ $env.N8N_WEBHOOK_URL }}/webhook/trigger-analyzer",
        "httpMethod": "POST",
        "options": {
          "timeout": 30000
        },
        "body": {
          "specifyBody": "json",
          "jsonBody": "={{ JSON.stringify({\n  \"niche\": $json.niche,\n  \"market_score\": $json.market_score,\n  \"target_audience\": $json.target_audience,\n  \"estimated_competition\": $json.estimated_competition,\n  \"source\": \"niche-generator-16\",\n  \"trigger_next\": \"niche-analyzer-18\"\n}) }}"
        }
      },
      "id": "trigger-analyzer",
      "name": "Trigger Niche Analyzer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1040, 200],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// ATT System - Execution Summary for Agent #16\n\nconst allData = $input.all();\nconst totalGenerated = allData.length;\nconst highPotential = allData.filter(item => item.json.market_score > 80).length;\nconst averageScore = Math.round(allData.reduce((sum, item) => sum + item.json.market_score, 0) / totalGenerated);\n\n// Calculate category distribution\nconst categoryStats = {};\nallData.forEach(item => {\n  const audience = item.json.target_audience;\n  categoryStats[audience] = (categoryStats[audience] || 0) + 1;\n});\n\n// Find top categories\nconst topCategories = Object.entries(categoryStats)\n  .sort((a, b) => b[1] - a[1])\n  .slice(0, 3)\n  .map(([category, count]) => `${category}: ${count}`);\n\nconst summary = {\n  agent: 'niche-generator-16',\n  execution_time: new Date().toISOString(),\n  total_generated: totalGenerated,\n  high_potential_count: highPotential,\n  average_market_score: averageScore,\n  top_categories: topCategories,\n  triggered_analyzers: highPotential,\n  cost_estimate: '$0.001',\n  next_agents: highPotential > 0 ? ['niche-analyzer-18'] : [],\n  success: true\n};\n\nconsole.log('üìä Niche Generator Summary:');\nconsole.log(`   ‚Ä¢ Generated: ${totalGenerated} niches`);\nconsole.log(`   ‚Ä¢ High potential: ${highPotential} niches`);\nconsole.log(`   ‚Ä¢ Average score: ${averageScore}`);\nconsole.log(`   ‚Ä¢ Top categories: ${topCategories.join(', ')}`);\nconsole.log(`   ‚Ä¢ Next: ${highPotential} niches sent to analyzer`);\n\nreturn [{ json: summary }];"
      },
      "id": "execution-summary",
      "name": "Execution Summary",
      "type": "n8n-nodes-base.code",    
      "typeVersion": 2,
      "position": [1240, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Generate Niche Combinations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Niche Combinations": {
      "main": [
        [
          {
            "node": "Save to Notion Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Notion Database": {
      "main": [
        [
          {
            "node": "Filter High Potential (>80)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter High Potential (>80)": {
      "main": [
        [
          {
            "node": "Trigger Niche Analyzer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execution Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Niche Analyzer": {
      "main": [
        [
          {
            "node": "Execution Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": [
    {
      "createdAt": "2024-12-21T10:00:00.000Z",
      "updatedAt": "2024-12-21T10:00:00.000Z",
      "id": "agent-16",
      "name": "niche-generator"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-12-21T10:00:00.000Z",
  "versionId": "v1.0-week3"
}