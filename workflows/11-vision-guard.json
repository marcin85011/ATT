{
  "name": "11-Vision-Guard",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhookTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "vision-guard-11"
    },
    {
      "parameters": {
        "jsCode": "// ATT System - Vision Guard Agent #11 - PRODUCTION\n// Real OpenAI Vision similarity detection against MBA catalog\n\nconst { trackCost } = require('../../shared/cost-tracker');\nconst { errorHandler } = require('../../shared/error-handler');\nconst { OpenAIVisionClient } = require('../../clients/openai-vision-client');\n\nasync function buildMBACatalog(niche, competitorData) {\n  // Build reference catalog from competitor data and common MBA designs\n  const referenceImages = [];\n  \n  // Add competitor images from SERP data\n  if (competitorData?.serp_data?.top_competitors) {\n    competitorData.serp_data.top_competitors.forEach(comp => {\n      if (comp.image_url && comp.image_url.includes('amazon')) {\n        referenceImages.push(comp.image_url);\n      }\n    });\n  }\n  \n  // Add common t-shirt design patterns for the niche (simulated catalog)\n  // In production, this would be a pre-built catalog of known designs\n  const commonPatterns = [\n    `https://m.media-amazon.com/images/I/placeholder-${niche}-1.jpg`,\n    `https://m.media-amazon.com/images/I/placeholder-${niche}-2.jpg`,\n    `https://m.media-amazon.com/images/I/placeholder-${niche}-3.jpg`,\n    `https://m.media-amazon.com/images/I/placeholder-${niche}-4.jpg`,\n    `https://m.media-amazon.com/images/I/placeholder-${niche}-5.jpg`\n  ];\n  \n  referenceImages.push(...commonPatterns);\n  \n  // Limit to 10 references to control costs (in production, use intelligent sampling)\n  return referenceImages.slice(0, 10);\n}\n\nasync function performVisionSimilarityCheck(candidateImageUrl, referenceImages, niche) {\n  const openaiApiKey = process.env.OPENAI_API_KEY;\n  \n  if (!openaiApiKey) {\n    throw new Error('OPENAI_API_KEY environment variable not set');\n  }\n  \n  const client = new OpenAIVisionClient(openaiApiKey);\n  \n  console.log(`üëÅÔ∏è Real vision similarity check for ${candidateImageUrl}`);\n  console.log(`üîç Comparing against ${referenceImages.length} reference images`);\n  \n  const similarityResult = await client.analyzeImageSimilarity(candidateImageUrl, referenceImages, {\n    threshold: 0.7, // 70% similarity threshold\n    includeDetails: true,\n    checkTrademarks: true,\n    checkStyle: true,\n    checkComposition: true\n  });\n  \n  if (!similarityResult.success) {\n    throw new Error(`Vision similarity check failed: ${similarityResult.error}`);\n  }\n  \n  return similarityResult;\n}\n\nasync function performTrademarkViolationCheck(imageUrl) {\n  const openaiApiKey = process.env.OPENAI_API_KEY;\n  \n  if (!openaiApiKey) {\n    console.warn('OPENAI_API_KEY not set, skipping trademark violation check');\n    return {\n      success: true,\n      safeToUse: true,\n      violations: [],\n      overallRisk: 'SAFE'\n    };\n  }\n  \n  const client = new OpenAIVisionClient(openaiApiKey);\n  \n  console.log(`üîç Real trademark violation check`);\n  \n  const violationResult = await client.detectTrademarkViolations(imageUrl, {\n    strictMode: true,\n    includeBrandLogos: true,\n    includeCharacters: true,\n    includeSlogans: true\n  });\n  \n  return violationResult;\n}\n\nasync function main() {\n  const inputData = $input.first().json;\n  const niche = inputData.niche;\n  const imageUrl = inputData.image_url;\n  \n  console.log(`üëÅÔ∏è Real vision guard checking: ${niche}`);\n  \n  try {\n    // Only proceed if image was generated\n    if (!imageUrl) {\n      console.log(`‚è≠Ô∏è Skipping vision check - no image URL available`);\n      return [{ json: { skipped: true, reason: 'no_image_url', niche } }];\n    }\n    \n    // Build reference catalog from available data\n    const referenceImages = await buildMBACatalog(niche, inputData);\n    \n    if (referenceImages.length === 0) {\n      console.log(`‚ö†Ô∏è No reference images available for comparison`);\n      return [{ json: {\n        niche,\n        image_url: imageUrl,\n        vision_status: 'approved',\n        can_proceed: true,\n        warning: 'No reference images available for comparison',\n        agent_source: 'vision-guard-11',\n        checked_at: new Date().toISOString()\n      }}];\n    }\n    \n    // Track real Vision API cost\n    const estimatedCost = client.calculateCost(referenceImages.length) + 0.003; // Add trademark check cost\n    await trackCost('vision_similarity', estimatedCost, `Agent #11 - Real vision similarity check for ${niche}`);\n    \n    // Perform similarity analysis\n    const similarityResults = await performVisionSimilarityCheck(imageUrl, referenceImages, niche);\n    \n    // Perform trademark violation check\n    const trademarkResults = await performTrademarkViolationCheck(imageUrl);\n    \n    // Determine overall status\n    const similarityPass = similarityResults.passesCheck;\n    const trademarkPass = trademarkResults.success ? trademarkResults.safeToUse : true;\n    const overallPass = similarityPass && trademarkPass;\n    \n    const visionStatus = overallPass ? 'approved' : 'rejected';\n    \n    // Build rejection reasons\n    const rejectionReasons = [];\n    if (!similarityPass) {\n      rejectionReasons.push(`High similarity (${(similarityResults.overallSimilarity * 100).toFixed(1)}%) to existing designs`);\n      rejectionReasons.push(...similarityResults.flaggedReasons.slice(0, 2));\n    }\n    if (!trademarkPass) {\n      rejectionReasons.push(`Trademark violation risk: ${trademarkResults.overallRisk}`);\n      if (trademarkResults.violations && trademarkResults.violations.length > 0) {\n        rejectionReasons.push(trademarkResults.violations[0].description);\n      }\n    }\n    \n    const result = {\n      niche,\n      image_url: imageUrl,\n      vision_check: {\n        similarity_analysis: similarityResults.analysis,\n        max_similarity: (similarityResults.overallSimilarity * 100).toFixed(1),\n        similarity_threshold: '70.0',\n        passes_similarity: similarityPass,\n        reference_count: referenceImages.length,\n        flagged_reasons: similarityResults.flaggedReasons\n      },\n      trademark_check: {\n        violations: trademarkResults.violations || [],\n        overall_risk: trademarkResults.overallRisk || 'UNKNOWN',\n        passes_trademark: trademarkPass,\n        recommendation: trademarkResults.recommendation || ''\n      },\n      vision_status: visionStatus,\n      can_proceed: overallPass,\n      rejection_reasons: rejectionReasons,\n      analysis_metadata: {\n        similarity_metadata: similarityResults.metadata,\n        trademark_metadata: trademarkResults.metadata\n      },\n      agent_source: 'vision-guard-11',\n      checked_at: new Date().toISOString(),\n      real_api: true\n    };\n    \n    console.log(`‚úÖ Real Vision Status: ${visionStatus}`);\n    console.log(`üìä Max similarity: ${result.vision_check.max_similarity}%`);\n    console.log(`üîí Trademark risk: ${result.trademark_check.overall_risk}`);\n    \n    if (rejectionReasons.length > 0) {\n      console.log(`üö® Rejection reasons: ${rejectionReasons.slice(0, 2).join('; ')}`);\n    }\n    \n    // Success heartbeat\n    await trackCost('system_health', 0.001, 'Agent #11 - Success heartbeat');\n    \n    return [{ json: result }];\n    \n  } catch (error) {\n    console.error('‚ùå Real Vision Guard error:', error);\n    await errorHandler('vision-guard-11', error, { niche });\n    throw error;\n  }\n}\n\nreturn await main();"
      },
      "id": "vision-guard-code",
      "name": "OpenAI Vision Similarity Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "{{ $env.NOTION_DATABASE_ID }}",
          "mode": "id"
        },
        "pageId": "={{ $json.niche }}",
        "properties": {
          "Vision Status": {
            "type": "select",
            "select": { "name": "={{ $json.vision_status }}" }
          },
          "Max Similarity": {
            "type": "number",
            "number": "={{ parseFloat($json.vision_check.max_similarity) }}"
          },
          "Similar Matches": {
            "type": "number",
            "number": "={{ $json.vision_check.similar_matches.length }}"
          },
          "Rejection Reason": {
            "type": "text",
            "text": [{ "type": "text", "text": "={{ $json.rejection_reason || 'N/A' }}" }]
          }
        }
      },
      "id": "update-vision-status",
      "name": "Update Vision Status",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [640, 300],
      "retryOnFail": true
    }
  ],
  "connections": {
    "Webhook Trigger": { "main": [[ { "node": "OpenAI Vision Similarity Check", "type": "main", "index": 0 } ]] },
    "OpenAI Vision Similarity Check": { "main": [[ { "node": "Update Vision Status", "type": "main", "index": 0 } ]] }
  },
  "settings": { "executionOrder": "v1" },
  "tags": [{ "id": "agent-11", "name": "vision-guard" }],
  "versionId": "v1.0-week5"
}