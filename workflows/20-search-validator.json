{
  "name": "20-Search-Validator",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-trigger",
      "name": "Webhook Trigger", 
      "type": "n8n-nodes-base.webhookTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "search-validator-20"
    },
    {
      "parameters": {
        "jsCode": "// ATT System - Search Validator Agent #20\n// Google Trends validation with trend direction analysis\n// Updated with Google Keyword API integration for real trend data\n\nconst GoogleKeywordClient = require('../../clients/google-keyword-client');\n\n// Initialize Google Keyword client\nconst keywordClient = new GoogleKeywordClient();\n\nasync function validateSearchTrends(niche) {\n  try {\n    // Get real search data from Google Keyword API with Agent #20 ID\n    const searchData = await keywordClient.getSearchVolume(niche, 'US', 'en', '20');\n    const suggestionsData = await keywordClient.getKeywordSuggestions(niche, 'US', '20');\n    \n    // Process real Google Keyword data\n    const trendData = {\n      keyword: niche,\n      current_volume: searchData.searchVolume || 500,\n      trend_direction: searchData.trendDirection || 'STABLE',\n      search_competition: searchData.competition || 'MEDIUM',\n      cpc_value: searchData.cpc || 0,\n      related_queries: [\n        niche + ' shirt',\n        niche + ' gift', \n        niche + ' design',\n        niche + ' funny',\n        ...(suggestionsData.map(s => s.keyword) || [])\n      ].slice(0, 8) // Limit to 8 related queries\n    };\n    \n    // Calculate trend direction and change percentage from Google data\n    const trendDirection = processTrendDirection(searchData.trendDirection, searchData.searchVolume);\n    \n    console.log(`‚úÖ Real trend data for \"${niche}\": Volume=${searchData.searchVolume}, Direction=${searchData.trendDirection}`);\n    \n    return {\n      ...trendData,\n      trend_direction: trendDirection.direction,\n      change_percent: trendDirection.changePercent,\n      is_declining: trendDirection.direction === 'FALLING',\n      source: 'google_keyword_api',\n      api_success: true\n    };\n    \n  } catch (error) {\n    console.warn(`‚ö†Ô∏è Failed to get real search data for \"${niche}\": ${error.message}`);\n    \n    // Fallback to estimated data\n    return generateFallbackTrendData(niche);\n  }\n}\n\n// Process Google Keyword API trend direction\nfunction processTrendDirection(apiTrendDirection, searchVolume) {\n  // Convert Google API trend direction to our format\n  let direction = 'STABLE';\n  let changePercent = '0.0';\n  \n  if (apiTrendDirection) {\n    switch (apiTrendDirection.toUpperCase()) {\n      case 'RISING':\n        direction = 'RISING';\n        changePercent = '25.0'; // Estimate rising trend\n        break;\n      case 'FALLING':\n        direction = 'FALLING';\n        changePercent = '-20.0'; // Estimate falling trend\n        break;\n      case 'STABLE':\n      default:\n        direction = 'STABLE';\n        changePercent = '0.0';\n        break;\n    }\n  } else {\n    // Estimate based on search volume\n    if (searchVolume > 50000) {\n      direction = 'RISING';\n      changePercent = '15.0';\n    } else if (searchVolume < 500) {\n      direction = 'FALLING';\n      changePercent = '-10.0';\n    }\n  }\n  \n  return {\n    direction,\n    changePercent\n  };\n}\n\n// Calculate trend direction from 12-month data (fallback function)\nfunction calculateTrendDirection(trend12m) {\n  if (!Array.isArray(trend12m) || trend12m.length < 6) {\n    // Not enough data, assume flat\n    return {\n      direction: 'flat',\n      changePercent: '0.0'\n    };\n  }\n  \n  const recent3m = trend12m.slice(-3);\n  const previous3m = trend12m.slice(-6, -3);\n  \n  const recentAvg = recent3m.reduce((a, b) => a + b, 0) / recent3m.length;\n  const previousAvg = previous3m.reduce((a, b) => a + b, 0) / previous3m.length;\n  \n  let direction = 'flat';\n  const changePercent = previousAvg > 0 ? ((recentAvg - previousAvg) / previousAvg) * 100 : 0;\n  \n  if (changePercent > 15) direction = 'rising';\n  else if (changePercent < -15) direction = 'falling';\n  \n  return {\n    direction,\n    changePercent: changePercent.toFixed(1)\n  };\n}\n\n// Generate estimated trends based on search volume\nfunction generateEstimatedTrends(searchVolume) {\n  const baseLevel = Math.max(20, Math.min(80, searchVolume / 10));\n  const trends = [];\n  \n  for (let i = 0; i < 12; i++) {\n    // Add seasonal variation and random fluctuation\n    const seasonal = Math.sin((i / 12) * 2 * Math.PI) * 15; // ¬±15 seasonal variation\n    const random = (Math.random() - 0.5) * 20; // ¬±10 random variation\n    const trend = Math.max(10, Math.min(100, baseLevel + seasonal + random));\n    trends.push(Math.round(trend));\n  }\n  \n  return trends;\n}\n\n// Fallback when API fails\nfunction generateFallbackTrendData(niche) {\n  console.warn(`Using fallback trend data for: ${niche}`);\n  \n  // Estimate based on niche characteristics\n  let baseVolume = 400;\n  const words = niche.toLowerCase().split(' ');\n  \n  // Adjust estimates based on niche type\n  if (words.includes('mom') || words.includes('dad')) baseVolume += 300;\n  if (words.includes('funny') || words.includes('humor')) baseVolume += 200;\n  if (words.includes('christmas') || words.includes('birthday')) baseVolume += 400;\n  if (words.length > 3) baseVolume -= 100; // Longer phrases = lower volume\n  \n  const currentVolume = Math.max(100, baseVolume + Math.floor(Math.random() * 200));\n  const trend12m = generateEstimatedTrends(currentVolume);\n  const trendDirection = calculateTrendDirection(trend12m);\n  \n  return {\n    keyword: niche,\n    current_volume: currentVolume,\n    trend_12m: trend12m,\n    related_queries: [\n      niche + ' shirt',\n      niche + ' gift', \n      niche + ' design',\n      niche + ' funny'\n    ],\n    trend_direction: trendDirection.direction,\n    change_percent: trendDirection.changePercent,\n    is_declining: trendDirection.direction === 'falling',\n    source: 'fallback-estimation',\n    api_success: false\n  };\n}\n\nasync function main() {\n  const inputData = $input.first().json;\n  const niche = inputData.niche;\n  \n  console.log(`üìà Starting Search Validator Agent #20 with Google Keyword API...`);\n  console.log(`üìà Validating search trends for: ${niche}`);\n  \n  try {\n    const trendsData = await validateSearchTrends(niche);\n    \n    const validation = {\n      niche,\n      opportunity_score: inputData.opportunity_score,\n      competitive_advantage_score: inputData.competitive_advantage_score,\n      search_validation: {\n        current_volume: trendsData.current_volume,\n        trend_direction: trendsData.trend_direction,\n        change_percent: trendsData.change_percent,\n        is_declining: trendsData.is_declining,\n        related_queries: trendsData.related_queries,\n        search_competition: trendsData.search_competition,\n        cpc_value: trendsData.cpc_value\n      },\n      final_recommendation: {\n        proceed: !trendsData.is_declining && inputData.opportunity_score > 70,\n        reason: trendsData.is_declining ? 'Declining search trends' : 'Validated opportunity',\n        priority: trendsData.trend_direction === 'RISING' ? 'high' : 'medium'\n      },\n      complete_analysis: inputData,\n      validated_at: new Date().toISOString(),\n      api_source: trendsData.source\n    };\n    \n    console.log(`üìä Real Google data: Volume=${trendsData.current_volume}, Competition=${trendsData.search_competition}`);\n    console.log(`üìä Trend direction: ${trendsData.trend_direction} (${trendsData.change_percent}%)`);\n    console.log(`‚úÖ Final recommendation: ${validation.final_recommendation.proceed ? 'PROCEED' : 'SKIP'}`);\n    \n    return [{ json: validation }];\n    \n  } catch (error) {\n    console.error('‚ùå Search Validator Agent #20 error:', error);\n    throw error;\n  }\n}\n\nreturn await main();"
      },
      "id": "validator-code",
      "name": "Google Trends Validation",
      "type": "n8n-nodes-base.code", 
      "typeVersion": 2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "{{ $env.NOTION_DATABASE_ID }}",
          "mode": "id"
        },
        "pageId": "={{ $json.niche }}",
        "properties": {
          "TrendDirection": {
            "type": "select",
            "select": { "name": "={{ $json.search_validation.trend_direction }}" }
          },
          "Search Volume": {
            "type": "number", 
            "number": "={{ $json.search_validation.current_volume }}"
          },
          "Trend Change": {
            "type": "text",
            "text": [{ "type": "text", "text": "={{ $json.search_validation.change_percent }}%" }]
          },
          "Final Status": {
            "type": "select",
            "select": { "name": "={{ $json.final_recommendation.proceed ? 'Validated' : 'Rejected' }}" }
          },
          "Priority": {
            "type": "select",
            "select": { "name": "={{ $json.final_recommendation.priority }}" }
          }
        }
      },
      "id": "update-nichedb",
      "name": "Update NicheDB with TrendDirection",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [640, 300],
      "retryOnFail": true
    }
  ],
  "connections": {
    "Webhook Trigger": { "main": [[ { "node": "Google Trends Validation", "type": "main", "index": 0 } ]] },
    "Google Trends Validation": { "main": [[ { "node": "Update NicheDB with TrendDirection", "type": "main", "index": 0 } ]] }
  },
  "settings": { "executionOrder": "v1" },
  "tags": [{ "id": "agent-20", "name": "search-validator" }],
  "versionId": "v1.0-week3"
}