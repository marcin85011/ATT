{
  "name": "06-Deep-Competitor",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhookTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "deep-competitor-06"
    },
    {
      "parameters": {
        "jsCode": "// ATT System - Deep Competitor Agent #06 - PRODUCTION\n// Real ScrapeHero Product API deep fetch on competitor ASINs\n\nconst { trackCost } = require('../../shared/cost-tracker');\nconst { isDuplicateTopic } = require('../../shared/utils');\nconst { errorHandler } = require('../../shared/error-handler');\nconst { ScrapeHeroClient } = require('../../clients/scrapehero-client');\n\nasync function deepFetchCompetitor(asin, client) {\n  console.log(`🔍 Real deep fetch for ASIN: ${asin}`);\n  \n  const productResult = await client.scrapeAmazonProduct(asin, {\n    marketplace: 'US',\n    includeReviews: true,\n    maxReviews: 20,\n    includeVariants: true\n  });\n  \n  if (!productResult.success) {\n    console.warn(`⚠️ Failed to fetch ${asin}: ${productResult.error}`);\n    return null;\n  }\n  \n  const product = productResult.product;\n  \n  // Calculate listing quality score based on real data\n  const qualityScore = calculateListingQuality(product);\n  \n  return {\n    asin,\n    fetch_timestamp: new Date().toISOString(),\n    product_details: {\n      title: product.title,\n      brand: product.brand,\n      price: product.price,\n      original_price: product.originalPrice,\n      discount: product.discount,\n      bsr: product.bsr ? (Array.isArray(product.bsr) ? product.bsr[0].rank : product.bsr) : null,\n      category_bsr: product.bsr ? (Array.isArray(product.bsr) ? product.bsr.find(b => b.category !== 'Main')?.rank : null) : null,\n      reviews: {\n        count: product.reviewCount,\n        rating: product.rating,\n        recent_reviews: product.reviews?.slice(0, 5) || []\n      },\n      images: product.images,\n      features: product.features,\n      description: product.description,\n      variations: {\n        colors: product.variants?.length || 0,\n        available_variants: product.variants?.map(v => ({\n          asin: v.asin,\n          color: v.color,\n          size: v.size,\n          price: v.price\n        })) || []\n      },\n      dimensions: product.dimensions,\n      weight: product.weight,\n      availability: product.availability,\n      seller: product.seller,\n      fulfillment: product.fulfillment,\n      keywords: product.keywords,\n      competitor_score: product.competitorScore,\n      listing_quality_score: qualityScore,\n      sales_estimate: estimateSales(product)\n    },\n    scrapehero_metadata: productResult.metadata\n  };\n}\n\nfunction calculateListingQuality(product) {\n  let score = 0;\n  \n  // Title quality (0-20 points)\n  if (product.title && product.title.length > 50) score += 20;\n  else if (product.title && product.title.length > 30) score += 15;\n  else score += 5;\n  \n  // Images quality (0-15 points)\n  const imageCount = product.images?.length || 0;\n  score += Math.min(15, imageCount * 3);\n  \n  // Reviews (0-25 points)\n  if (product.reviewCount > 1000) score += 25;\n  else if (product.reviewCount > 100) score += 20;\n  else if (product.reviewCount > 10) score += 15;\n  else score += 5;\n  \n  // Rating (0-15 points)\n  if (product.rating >= 4.5) score += 15;\n  else if (product.rating >= 4.0) score += 12;\n  else if (product.rating >= 3.5) score += 8;\n  else score += 3;\n  \n  // Features/bullets (0-10 points)\n  const featureCount = product.features?.length || 0;\n  score += Math.min(10, featureCount * 2);\n  \n  // Description (0-10 points)\n  if (product.description && product.description.length > 200) score += 10;\n  else if (product.description && product.description.length > 100) score += 7;\n  else score += 3;\n  \n  // BSR bonus (0-5 points)\n  const bsr = Array.isArray(product.bsr) ? product.bsr[0]?.rank : product.bsr;\n  if (bsr && bsr < 50000) score += 5;\n  else if (bsr && bsr < 100000) score += 3;\n  else if (bsr && bsr < 500000) score += 1;\n  \n  return Math.min(100, score);\n}\n\nfunction estimateSales(product) {\n  const bsr = Array.isArray(product.bsr) ? product.bsr[0]?.rank : product.bsr;\n  const reviewCount = product.reviewCount || 0;\n  \n  // Simple sales estimation based on BSR and reviews\n  if (!bsr) return Math.max(1, Math.floor(reviewCount / 10));\n  \n  if (bsr < 10000) return Math.floor(reviewCount / 2) + 50;\n  if (bsr < 50000) return Math.floor(reviewCount / 5) + 20;\n  if (bsr < 100000) return Math.floor(reviewCount / 10) + 10;\n  if (bsr < 500000) return Math.floor(reviewCount / 20) + 5;\n  \n  return Math.max(1, Math.floor(reviewCount / 50));\n}\n\nfunction analyzeMarketGaps(products) {\n  const gaps = [];\n  \n  const avgImages = products.reduce((sum, p) => sum + (p.deep_data.images?.length || 0), 0) / products.length;\n  const avgFeatures = products.reduce((sum, p) => sum + (p.deep_data.features?.length || 0), 0) / products.length;\n  const avgVariants = products.reduce((sum, p) => sum + (p.deep_data.variations?.colors || 0), 0) / products.length;\n  \n  if (avgImages < 5) gaps.push('Limited product photography');\n  if (avgFeatures < 4) gaps.push('Minimal feature descriptions');\n  if (avgVariants < 3) gaps.push('Limited color/size variety');\n  \n  const hasLowQuality = products.some(p => p.deep_data.listing_quality_score < 70);\n  if (hasLowQuality) gaps.push('Quality listing optimization opportunity');\n  \n  return gaps;\n}\n\nasync function analyzeCompetitorGroup(competitorData) {\n  const scrapeheroApiKey = process.env.SCRAPEHERO_API_KEY;\n  \n  if (!scrapeheroApiKey) {\n    throw new Error('SCRAPEHERO_API_KEY environment variable not set');\n  }\n  \n  const client = new ScrapeHeroClient(scrapeheroApiKey);\n  const products = competitorData.serp_data?.top_competitors || [];\n  const deepAnalysis = [];\n  \n  // Analyze top 3 competitors with real data\n  for (const competitor of products.slice(0, 3)) {\n    if (!competitor.asin || competitor.asin.startsWith('UNKNOWN')) {\n      console.warn(`⚠️ Skipping invalid ASIN: ${competitor.asin}`);\n      continue;\n    }\n    \n    const productDetails = await deepFetchCompetitor(competitor.asin, client);\n    \n    if (productDetails) {\n      const competitiveAdvantages = [\n        productDetails.product_details.bsr ? `BSR: ${productDetails.product_details.bsr}` : 'BSR: Not available',\n        `Reviews: ${productDetails.product_details.reviews.count}`,\n        `Rating: ${productDetails.product_details.reviews.rating}/5`,\n        `Quality: ${productDetails.product_details.listing_quality_score}/100`,\n        `Variants: ${productDetails.product_details.variations.colors}`\n      ];\n      \n      deepAnalysis.push({\n        competitor_rank: competitor.rank,\n        asin: competitor.asin,\n        deep_data: productDetails.product_details,\n        competitive_advantages: competitiveAdvantages,\n        fetch_metadata: productDetails.scrapehero_metadata\n      });\n      \n      // Rate limiting\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n  \n  return deepAnalysis;\n}\n\nasync function main() {\n  const inputData = $input.first().json;\n  const niche = inputData.niche;\n  \n  console.log(`🔬 Real deep competitor analysis for: ${niche}`);\n  \n  try {\n    // Track real ScrapeHero API cost (per product)\n    await trackCost('scrapehero_deep', 0.005, `Agent #06 - Real deep competitor analysis for ${niche}`);\n    \n    const deepAnalysis = await analyzeCompetitorGroup(inputData);\n    \n    if (deepAnalysis.length === 0) {\n      return [{ json: {\n        niche,\n        error: 'No valid competitor ASINs found for deep analysis',\n        agent_source: 'deep-competitor-06',\n        processed_at: new Date().toISOString()\n      }}];\n    }\n    \n    // Calculate aggregate insights from real data\n    const validBSRs = deepAnalysis.filter(a => a.deep_data.bsr).map(a => a.deep_data.bsr);\n    const avgBSR = validBSRs.length > 0 ? validBSRs.reduce((sum, bsr) => sum + bsr, 0) / validBSRs.length : null;\n    const avgReviews = deepAnalysis.reduce((sum, a) => sum + a.deep_data.reviews.count, 0) / deepAnalysis.length;\n    const avgRating = deepAnalysis.reduce((sum, a) => sum + a.deep_data.reviews.rating, 0) / deepAnalysis.length;\n    const avgQuality = deepAnalysis.reduce((sum, a) => sum + a.deep_data.listing_quality_score, 0) / deepAnalysis.length;\n    const totalSalesEstimate = deepAnalysis.reduce((sum, a) => sum + (a.deep_data.sales_estimate || 0), 0);\n    \n    const marketGaps = analyzeMarketGaps(deepAnalysis);\n    \n    const result = {\n      niche,\n      deep_competitor_analysis: deepAnalysis,\n      aggregate_insights: {\n        analyzed_count: deepAnalysis.length,\n        average_bsr: avgBSR ? Math.round(avgBSR) : null,\n        average_reviews: Math.round(avgReviews),\n        average_rating: parseFloat(avgRating.toFixed(2)),\n        average_quality_score: Math.round(avgQuality),\n        total_estimated_sales: totalSalesEstimate,\n        market_opportunity: avgQuality < 80 ? 'high' : avgQuality < 90 ? 'medium' : 'low',\n        bsr_opportunity: avgBSR ? (avgBSR > 100000 ? 'high' : avgBSR > 50000 ? 'medium' : 'low') : 'unknown'\n      },\n      market_gaps: marketGaps,\n      strategic_recommendations: [\n        avgBSR ? (avgBSR > 100000 ? 'BSR opportunity exists' : 'Highly competitive BSR range') : 'BSR data unavailable',\n        avgReviews < 500 ? 'Review count opportunity' : 'Established review base',\n        avgQuality < 85 ? 'Quality improvement opportunity' : 'High quality competition',\n        avgRating < 4.0 ? 'Customer satisfaction opportunity' : 'Strong customer satisfaction'\n      ],\n      agent_source: 'deep-competitor-06',\n      processed_at: new Date().toISOString(),\n      real_api: true\n    };\n    \n    console.log(`✅ Analyzed ${deepAnalysis.length} top competitors with real data`);\n    console.log(`📊 Market opportunity: ${result.aggregate_insights.market_opportunity}`);\n    console.log(`🎯 Average BSR: ${result.aggregate_insights.average_bsr || 'N/A'}`);\n    console.log(`⭐ Average rating: ${result.aggregate_insights.average_rating}`);\n    \n    // Success heartbeat\n    await trackCost('system_health', 0.001, 'Agent #06 - Success heartbeat');\n    \n    return [{ json: result }];\n    \n  } catch (error) {\n    console.error('❌ Real Deep Competitor error:', error);\n    await errorHandler('deep-competitor-06', error, { niche });\n    throw error;\n  }\n}\n\nreturn await main();"
      },
      "id": "deep-competitor-code",
      "name": "ScrapeHero Deep Fetch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [440, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "{{ $env.NOTION_DATABASE_ID }}",
          "mode": "id"
        },
        "pageId": "={{ $json.niche }}_competitors",
        "properties": {
          "Deep Analysis": {
            "type": "text",
            "text": [{ "type": "text", "text": "={{ JSON.stringify($json.deep_competitor_analysis) }}" }]
          },
          "Market Opportunity": {
            "type": "select",
            "select": { "name": "={{ $json.aggregate_insights.market_opportunity }}" }
          },
          "Average BSR": {
            "type": "number",
            "number": "={{ $json.aggregate_insights.average_bsr }}"
          },
          "Average Reviews": {
            "type": "number",
            "number": "={{ $json.aggregate_insights.average_reviews }}"
          },
          "Quality Score": {
            "type": "number",
            "number": "={{ $json.aggregate_insights.average_quality_score }}"
          },
          "Recommendations": {
            "type": "text",
            "text": [{ "type": "text", "text": "={{ $json.strategic_recommendations.join('; ') }}" }]
          }
        }
      },
      "id": "update-competitorsdb",
      "name": "Update CompetitorsDB Deep",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [640, 300],
      "retryOnFail": true
    }
  ],
  "connections": {
    "Webhook Trigger": { "main": [[ { "node": "ScrapeHero Deep Fetch", "type": "main", "index": 0 } ]] },
    "ScrapeHero Deep Fetch": { "main": [[ { "node": "Update CompetitorsDB Deep", "type": "main", "index": 0 } ]] }
  },
  "settings": { "executionOrder": "v1" },
  "tags": [{ "id": "agent-06", "name": "deep-competitor" }],
  "versionId": "v1.0-week4"
}