{
  "name": "Agent #31 - Mockup Generator QC",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mockup-generator",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [140, 300],
      "webhookId": "mockup-generator-31"
    },
    {
      "parameters": {
        "jsCode": "// Agent #31 Mockup Generator - Input Processing\n// TODO: Implement full processing logic in Phase 6-β\n\nconst { MockupClient } = require('../clients/mockup-client');\nconst { validateEnvironment } = require('../shared/utils');\n\nconst inputData = $input.first().json;\nconst designImageUrl = inputData.design_url || inputData.image_url || '';\nconst designId = inputData.design_id || 'unknown';\nconst mockupOptions = inputData.mockup_options || {};\n\nif (!designImageUrl) {\n  throw new Error('No design image URL provided for mockup generation');\n}\n\n// Initialize client\nconst client = new MockupClient();\n\n// Validate environment\nconst envCheck = validateEnvironment(['PLACEIT_API_KEY']);\nif (!envCheck.valid && process.env.MOCK_MODE !== 'true') {\n  console.warn('⚠️ Placeit API key missing - running in mock mode');\n}\n\nconsole.log(`🎨 Agent #31 processing mockup generation for design: ${designId}`);\nconsole.log(`🖼️ Design URL: ${designImageUrl}`);\nconsole.log(`⚙️ Options:`, JSON.stringify(mockupOptions, null, 2));\n\nreturn {\n  design_id: designId,\n  design_image_url: designImageUrl,\n  mockup_options: {\n    garment_type: mockupOptions.garment_type || 'unisex_tshirt',\n    garment_colors: mockupOptions.garment_colors || ['black', 'white', 'heather_gray'],\n    mockup_types: mockupOptions.mockup_types || ['front_view', 'lifestyle', 'flat_lay'],\n    resolution: mockupOptions.resolution || '1200x1200',\n    format: mockupOptions.format || 'PNG',\n    ...mockupOptions\n  },\n  timestamp: new Date().toISOString(),\n  agent: 'mockup-generator-31'\n};"
      },
      "id": "process-input",
      "name": "Process Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Agent #31 - Design Image Validation\n// TODO: Implement comprehensive validation in Phase 6-β\n\nconst data = $input.first().json;\n\nconsole.log(`🔍 Validating design image: ${data.design_image_url}`);\n\n// Basic URL validation\nif (!data.design_image_url.startsWith('http')) {\n  throw new Error('Invalid design image URL - must start with http/https');\n}\n\n// TODO: Add more validation in Phase 6-β:\n// - Check if URL is accessible\n// - Validate image format (PNG, JPG)\n// - Check image dimensions (should be 4500x5400 for print)\n// - Verify image quality and clarity\n\n// For Phase 6-α, we'll simulate validation\nconst validation = {\n  url_valid: true,\n  accessible: true,\n  format_valid: true,\n  dimensions_valid: true,\n  quality_score: 9.2,\n  print_ready: true,\n  estimated_file_size: '2.4MB'\n};\n\nconsole.log(`✅ Design validation completed:`, validation);\n\nreturn {\n  ...data,\n  design_validation: validation,\n  validation_passed: validation.url_valid && validation.accessible && validation.format_valid\n};"
      },
      "id": "validate-design",
      "name": "Validate Design Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [540, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "dateTime": [],
          "number": [],
          "string": [
            {
              "id": "validation-check",
              "leftValue": "={{ $json.validation_passed }}",
              "rightValue": "true",
              "operation": "equal"
            }
          ]
        },
        "combineOperation": "all"
      },
      "id": "check-validation",
      "name": "Check Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [740, 300]
    },
    {
      "parameters": {
        "jsCode": "// Agent #31 - Mockup Generation Execution\n// TODO: Complete implementation in Phase 6-β\n\nconst { MockupClient } = require('../clients/mockup-client');\nconst { errorHandler } = require('../shared/error-handler');\n\nconst data = $input.first().json;\n\ntry {\n  const client = new MockupClient();\n  \n  // Generate mockups\n  const mockupResult = await client.generateMockups(data.design_image_url, data.mockup_options);\n  \n  console.log(`✅ Mockup generation completed for ${data.design_id}`);\n  console.log(`📊 Status: ${mockupResult.status}`);\n  console.log(`🎨 Mockups generated: ${mockupResult.mockups_generated}`);\n  console.log(`💰 Estimated cost: $${mockupResult.estimated_cost}`);\n  console.log(`⭐ Quality score: ${mockupResult.quality_score}/10`);\n  \n  // Log mockup URLs\n  if (mockupResult.mockup_urls) {\n    mockupResult.mockup_urls.forEach((mockup, index) => {\n      console.log(`  ${index + 1}. ${mockup.type}: ${mockup.url}`);\n    });\n  }\n  \n  return {\n    ...data,\n    qc_result: mockupResult,\n    success: true,\n    completed_at: new Date().toISOString()\n  };\n  \n} catch (error) {\n  console.error(`❌ Mockup generation failed for ${data.design_id}:`, error.message);\n  \n  await errorHandler('mockup-generator-31', error, {\n    design_id: data.design_id,\n    design_url: data.design_image_url\n  });\n  \n  return {\n    ...data,\n    qc_result: {\n      agent: 'mockup-generator-31',\n      status: 'fail',\n      error: error.message,\n      mockups_generated: 0,\n      processing_time_ms: 0,\n      estimated_cost: 0\n    },\n    success: false,\n    error: error.message,\n    completed_at: new Date().toISOString()\n  };\n}"
      },
      "id": "mockup-generation-execution",
      "name": "Mockup Generation Execution",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [940, 200]
    },
    {
      "parameters": {
        "jsCode": "// Agent #31 - Validation Failed Handler\n// TODO: Enhance validation failure handling in Phase 6-β\n\nconst data = $input.first().json;\n\nconsole.error(`❌ Design validation failed for ${data.design_id}`);\nconsole.error('Validation details:', JSON.stringify(data.design_validation, null, 2));\n\nconst validationIssues = [];\nif (!data.design_validation.url_valid) validationIssues.push('Invalid URL format');\nif (!data.design_validation.accessible) validationIssues.push('URL not accessible');\nif (!data.design_validation.format_valid) validationIssues.push('Invalid image format');\nif (!data.design_validation.dimensions_valid) validationIssues.push('Invalid dimensions');\n\nreturn {\n  ...data,\n  qc_result: {\n    agent: 'mockup-generator-31',\n    status: 'fail',\n    error: 'Design validation failed',\n    validation_issues: validationIssues,\n    mockups_generated: 0,\n    processing_time_ms: 0,\n    estimated_cost: 0\n  },\n  success: false,\n  error: `Validation failed: ${validationIssues.join(', ')}`,\n  completed_at: new Date().toISOString()\n};"
      },
      "id": "handle-validation-failure",
      "name": "Handle Validation Failure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [940, 400]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "dateTime": [],
          "number": [],
          "string": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.success }}",
              "rightValue": "true",
              "operation": "equal"
            }
          ]
        },
        "combineOperation": "all"
      },
      "id": "check-success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1140, 300]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "resource": "databaseItem",
        "operation": "create",
        "databaseId": "={{ $env.NOTION_QC_DATABASE_ID }}",
        "simple": false,
        "properties": {\n          \"metaData\": [\n            {\n              \"key\": \"Design ID\",\n              \"type\": \"title\",\n              \"value\": \"={{ $json.design_id }}\"\n            },\n            {\n              \"key\": \"Agent\",\n              \"type\": \"select\",\n              \"value\": \"mockup-generator-31\"\n            },\n            {\n              \"key\": \"Status\",\n              \"type\": \"select\",\n              \"value\": \"={{ $json.qc_result.status }}\"\n            },\n            {\n              \"key\": \"Score\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.qc_result.quality_score || 0 }}\"\n            },\n            {\n              \"key\": \"Results\",\n              \"type\": \"rich_text\",\n              \"value\": \"={{ JSON.stringify($json.qc_result) }}\"\n            },\n            {\n              \"key\": \"Issues\",\n              \"type\": \"rich_text\",\n              \"value\": \"={{ $json.qc_result.validation_issues ? $json.qc_result.validation_issues.join('; ') : '' }}\"\n            },\n            {\n              \"key\": \"Recommendations\",\n              \"type\": \"rich_text\",\n              \"value\": \"={{ $json.qc_result.mockups_generated >= 3 ? 'Excellent mockup set generated' : 'Consider generating more mockup variations' }}\"\n            },\n            {\n              \"key\": \"Processing Time\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.qc_result.processing_time_ms || 0 }}\"\n            },\n            {\n              \"key\": \"Cost\",\n              \"type\": \"number\",\n              \"value\": \"={{ $json.qc_result.estimated_cost || 0 }}\"\n            }\n          ]\n        }
      },
      "id": "save-to-notion",
      "name": "Save to Notion QC DB",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "jsCode": "// Agent #31 - Error Handling and Logging\n// TODO: Enhance error handling in Phase 6-β\n\nconst data = $input.first().json;\n\nconsole.error(`❌ Agent #31 failed for design: ${data.design_id}`);\nconsole.error(`Error: ${data.error}`);\n\n// Log to error tracking system\nconst errorEntry = {\n  agent: 'mockup-generator-31',\n  design_id: data.design_id,\n  error: data.error,\n  timestamp: new Date().toISOString(),\n  design_url: data.design_image_url,\n  validation_passed: data.validation_passed,\n  retry_count: data.retry_count || 0\n};\n\nconsole.log('Error entry:', JSON.stringify(errorEntry, null, 2));\n\nreturn {\n  ...data,\n  error_logged: true,\n  error_entry: errorEntry\n};"
      },
      "id": "handle-error",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  agent: 'mockup-generator-31',\n  design_id: $json.design_id,\n  success: $json.success,\n  status: $json.qc_result.status,\n  mockups_generated: $json.qc_result.mockups_generated,\n  mockup_urls: $json.qc_result.mockup_urls,\n  quality_score: $json.qc_result.quality_score,\n  estimated_cost: $json.qc_result.estimated_cost,\n  result: $json.qc_result,\n  timestamp: $json.completed_at\n}) }}"
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1540, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Input": {
      "main": [
        [
          {
            "node": "Validate Design Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Design Image": {
      "main": [
        [
          {
            "node": "Check Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation": {
      "main": [
        [
          {
            "node": "Mockup Generation Execution",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Validation Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mockup Generation Execution": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Validation Failure": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Save to Notion QC DB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Notion QC DB": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0-week6-alpha",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "att-system-agent-31"
  },
  "id": "agent-31-mockup-generator",
  "tags": [
    {
      "createdAt": "2024-12-30T00:00:00.000Z",
      "updatedAt": "2024-12-30T00:00:00.000Z",
      "id": "qc-agents",
      "name": "QC Agents"
    }
  ]
}